
#Check at this rate if fleet is supplied
@SL_SUPPLY_CHECK_INTERVAL = 30

@SL_HP_WEAR_AND_TEAR = 1 		# once per month

#If out of supply (must also be changed in SL_ship_modifiers.txt)
@SL_PENALTY_INC =  6 	    	# per SL_SUPPLY_CHECK_INTERVAL
@SL_PENALTY_DEC = -6			# Bonus of arriving supply fleets
@SL_HP_PENALTY = 5       		# per SL_SUPPLY_CHECK_INTERVAL

#Number of days that consumer has supplies
@SL_SUPPLY_DURATION = 180
@SL_SUPPLY_DURATION_REDUCED = 60 		


namespace = SGM_SL_event

#Supply ship arrives at consumer
#this: supply fleet
#Triggerd by SGM_SL_event.21
fleet_event = {
    id = SGM_SL_event.211
    hide_window = yes
    is_triggered_only = yes	
	
	immediate={
		event_target:SL_consumer ={	
			set_timed_fleet_flag={flag=SL_is_supplied days=@SL_SUPPLY_DURATION}		
			add_modifier={modifier=SL_fresh_supplies days=60}
			if={limit={check_variable={which=SGM_ship_modifier_supply value > 0}}
				change_variable={which=SGM_ship_modifier_supply value=@SL_PENALTY_DEC}
			}
		}
	} 
}

#Supply ship departs from consumer
#this: supply fleet
#Triggerd by SGM_SL_event.21
fleet_event = {
    id = SGM_SL_event.212
    hide_window = yes
    is_triggered_only = yes
	
	immediate={
		event_target:SL_consumer ={			
			if={limit={check_variable={which=SGM_ship_modifier_supply value > 0}}
				change_variable={which=SGM_ship_modifier_supply value=@SL_PENALTY_DEC}
			}			
		}
	} 
}

#Supply check
#Triggered on game update rate. Calls are skipped depending on timed_flag "SL_supply_check_inactive".
#This code is not performance critical, but is still executed frequently...
country_event = {
	id = SGM_SL_event.3
	hide_window = yes
	
	trigger = {				
		has_country_flag=SL_ENABLE		
		NOT={has_country_flag=SL_supply_check_inactive}
	}
	
	immediate = {
		set_timed_country_flag={flag=SL_supply_check_inactive days=@SL_SUPPLY_CHECK_INTERVAL}
		save_event_target_as = SL_country		
		
		#Try to work as much as possible on fleet scope to avoid unnecessary checks
		#that are the same for all ships in a fleet anyway
		every_owned_fleet = {
			limit={
				is_ship_class = shipclass_military
				exists = solar_system
			}
			save_event_target_as = SL_consumer
			
			#If we found a new fleet, introduce it to the system
			# id = SGM_SL_event.3.trigger.1
			if={limit={NOT={has_fleet_flag=SL_supply_initialized}}
				set_fleet_flag = SL_supply_initialized
				set_variable={which=SGM_ship_modifier_supply value=0}
				if={limit={solar_system={any_system_planet={exists = controller controller = { is_same_value = event_target:SL_country }}}}
					set_timed_fleet_flag={flag=SL_is_supplied days=@SL_SUPPLY_DURATION}
                }
				else={
					set_timed_fleet_flag={flag=SL_is_supplied days=@SL_SUPPLY_DURATION_REDUCED}
				}
			}

			#If we are docked to a friendly or neutral spaceport, we dont need supplies
			#and there is also no wear and tear. But we need to slowly remove accumulated
			#SGM_ship_modifier_supply, which is why this needs to be tested even for NOT SL_consumer
			if = {
                limit = { exists = orbit }
				orbit = {
					if = {
                        limit = {
							exists = controller
                            controller = {
                                OR = {
                                    is_same_value = event_target:SL_country
                                    is_overlord_to = event_target:SL_country
                                    event_target:SL_country = { is_overlord_to = prev }
                                    has_defensive_pact = event_target:SL_country
                                    is_in_federation_with = event_target:SL_country
                                }
                            }
						}
						event_target:SL_consumer={
							fleet_event={id=SGM_SL_event.5}
						}
					} else = {
                        prev = {
                            remove_fleet_flag = SL_docked_at_friendly_spaceport
                        }
                    }
				}
            } else = {
                remove_fleet_flag = SL_docked_at_friendly_spaceport
            }
			
			#If this fleet is not one of the current consumer fleets, stop execution
			if={limit={NOT={has_fleet_flag=SL_consumer}}
				break = yes
			}
			
			#If we are not docked and out of supply, apply modifiers to the fleet.
			#Modifiers that must be applied in ship scope are handled below
			if={limit={
					check_variable={which=SGM_ship_modifier_supply value > 0}
					OR={
						has_fleet_flag = SL_is_supplied
						has_fleet_flag = SL_docked_at_friendly_spaceport					
					}
				}
				change_variable={which=SGM_ship_modifier_supply value= -1}
			}
			if={limit={
					NOT={has_fleet_flag = SL_is_supplied}
					NOT={has_fleet_flag = SL_docked_at_friendly_spaceport}
					OR={
						AND={check_variable={which=SGM_ship_modifier_supply value<30} root={is_ai=no }}
						AND={check_variable={which=SGM_ship_modifier_supply value<30} root={is_ai=yes}}
					}
				}					
				change_variable={which=SGM_ship_modifier_supply value=@SL_PENALTY_INC}
			}							
			SGM_ship_modifier_supply_add = yes
		}
		
		#If we are not docked and out of supply, apply modifiers on ship scope.
		if={limit={always=yes}
			every_owned_ship={
				limit={
					is_ship_class = shipclass_military
					has_HP < 28000
					fleet={
						NOT={has_fleet_flag = SL_docked_at_friendly_spaceport}
						NOT={has_fleet_flag = SL_is_supplied}
					}				
				}
				reduce_hp_percent = @SL_HP_PENALTY #does only work with integer??!
				reduce_hp = 2 #because reduce_hp_percent is based on CURRENT hp, not total, otherwise ships never die of starvation			
			}
        }
		else={
			every_owned_ship={
				# id = SGM_SL_event.3.trigger.3
				limit={
					is_ship_class = shipclass_military
					has_HP < 28000
					fleet={
						NOT={has_fleet_flag = SL_docked_at_friendly_spaceport}
						NOT={has_fleet_flag = SL_is_supplied}
						check_variable={which=SGM_ship_modifier_supply value<30}
					}				
				}
				reduce_hp_percent = @SL_HP_PENALTY #does only work with integer??!		
			}			
		}
	}
}

#natural wear and tear and debt handling
#Triggered on_monthly_pulse.
event = {
	id = SGM_SL_event.4
	hide_window = yes
	is_triggered_only = yes
		
	immediate = {
		every_country={
			
			every_owned_ship={
				limit={
					is_ship_class = shipclass_military
					has_HP < 28000
					fleet={NOT={has_fleet_flag = SL_docked_at_friendly_spaceport}}					
				}
				reduce_hp_percent = @SL_HP_WEAR_AND_TEAR #does only work with integer??!
			}
			#debt handling
			if={limit={check_variable={which=SL_alloys_demand value > 0}}
				# save_event_target_as=SGM_result_scope				
				# SGM_country_get_mineral_balance = yes
				# set_variable={which=SGM_sub_minerals value=SGM_mineral_balance} TODO remove
                SLEX_get_custom_parameter_advanced = {
                    CONDITION_NAME = has_resource
                    FIRST_KW = type
                    SECOND_KW = alloys
                    THIRD_KW = amount
                    VARIABLE = SGM_sub_alloys
                    ROUNDING_ZEROES = 0
                }
				divide_variable={which=SGM_sub_alloys value=2}
				if={limit={check_variable={which=SGM_sub_alloys value > SL_alloys_demand}}
					set_variable={which=SGM_sub_alloys value=SL_alloys_demand}
					#log="[This.GetName] reduced SL debt to zero."
				}				
				#substract_variable={which=SL_alloys_demand value=SGM_sub_alloys} not working				
				set_variable={which=SGM_debt_reduction value=SGM_sub_alloys}
				multiply_variable={which=SGM_debt_reduction value=-1}				
				change_variable={which=SL_alloys_demand value=SGM_debt_reduction}
				if={limit={check_variable={which=SGM_sub_alloys value > 0}}
					log="[This.GetName] reducing SL mineral debt by [This.SGM_sub_alloys]. There is still [This.SL_alloys_demand] remaining."
                }
				else={
					log="[This.GetName] not reducing SL mineral debt ([This.SL_alloys_demand]) this month (too few minerals)"
				}
				SGM_country_sub_alloys = { AMOUNT = SGM_sub_alloys }
				set_variable={which=SGM_sub_alloys value=0}
			}			
		}
	}
}

#Effect of being docked to a friendly spaceport
fleet_event ={
	id = SGM_SL_event.5
	hide_window = yes
	is_triggered_only = yes
	
	immediate = {		
		set_fleet_flag=SL_docked_at_friendly_spaceport
		#Remove the supply line ID, to free it up for other fleets that might need it
		#MARKER:SUPPLY_LINE_NUMBER
		remove_fleet_flag = SL_consumer
		remove_fleet_flag = SL_01_consumer
		remove_fleet_flag = SL_02_consumer
		remove_fleet_flag = SL_03_consumer
		remove_fleet_flag = SL_04_consumer
		remove_fleet_flag = SL_05_consumer
		remove_fleet_flag = SL_06_consumer
		remove_fleet_flag = SL_07_consumer
		remove_fleet_flag = SL_08_consumer
		remove_fleet_flag = SL_09_consumer
		remove_fleet_flag = SL_10_consumer
		#Spaceports refill supplies
		set_timed_fleet_flag={flag=SL_is_supplied days=@SL_SUPPLY_DURATION}
		#and repair weapon and hull damage
		if={limit={check_variable={which=SGM_ship_modifier_supply value > 0}}
			change_variable={which=SGM_ship_modifier_supply value=@SL_PENALTY_DEC}
		}
	}
}