namespace = synthstart

planet_event = {
	id = synthstart.1
	hide_window = yes
	is_triggered_only = yes


	immediate = {

	if = {
		limit = { owner = { has_origin = origin_synth_start } }

		add_building = building_robot_assembly_plant
	
		remove_district = district_farming
		remove_district = district_farming

		add_district = district_generator
		add_district = district_generator

   		owner = {

			add_modifier = { modifier = "imperfect_synth" }

#get techs and policy
			give_technology = { tech = tech_robotic_workers message = no }
        		give_technology = { tech = tech_droid_workers message = no }
       			give_technology = { tech = tech_synthetic_workers message = no }
        		give_technology = { tech = tech_synthetic_leaders message = no }        

			hidden_effect = {
                		set_policy = {
                   	 		policy = artificial_intelligence_policy
                   	 		option = ai_full_rights
                   	 		cooldown = yes
                		}
			}
#make robot race
            		create_species = {
                		name = this
               	 		namelist = this
                		plural = this
                		class = "ROBOT"
                		portrait = "default_robot"
                		traits = {
                  	  		trait = "trait_mechanical"
				}
			
                		effect = {
                   			if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
                        		prev = {
                            			switch = {
                               	 			trigger = is_species_class
                                			HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
                                			MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
                                			REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
                                			AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
                                			ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
                                			MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
                                			FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
                                			PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
                            			}
                        		}
                    		}
                    		save_event_target_as = new_robotic_species
                		}
            		}

#swap pops to new robot race ()

            		every_owned_pop = {
                		change_species = event_target:new_robotic_species
            		}

#swap leaders to new robot race

            		every_owned_leader = {
                		change_species = event_target:new_robotic_species
                		change_leader_portrait = species
            		}

            		every_pool_leader = {
                		change_species = event_target:new_robotic_species
                		change_leader_portrait = species
            		}

#set new specie as dominant and flag
            		change_dominant_species = { species = event_target:new_robotic_species }
			set_country_flag = synthetic_empire
         
#give leaders synth traits
         		every_owned_leader = {
                		limit = {
                    			species = { has_trait = trait_mechanical }
                    			NOR = {
                        			has_trait = leader_trait_admiral_synthetic
                        			has_trait = leader_trait_general_synthetic
                        			has_trait = leader_trait_governor_synthetic
                        			has_trait = leader_trait_scientist_synthetic
                        			has_trait = leader_trait_ruler_synthetic
                    			}
                		}
                		if = {
                    			limit = { leader_class = admiral }
                    			add_trait = leader_trait_admiral_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
                		}
                		if = {
                    			limit = { leader_class = general }
                    			add_trait = leader_trait_general_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
                		}
                		if = {
                    			limit = { leader_class = governor }
                    			add_trait = leader_trait_governor_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
                		}
                		if = {
                    			limit = { leader_class = scientist }
                    			add_trait = leader_trait_scientist_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
                		}
                		if = {
                   			limit = { leader_class = ruler }
                    			add_trait = leader_trait_ruler_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
                		}
            		}
            		every_pool_leader = {
               			limit = {
                    			species = { has_trait = trait_mechanical }
                    			NOR = {
                        			has_trait = leader_trait_admiral_synthetic
                        			has_trait = leader_trait_general_synthetic
                        			has_trait = leader_trait_governor_synthetic
                        			has_trait = leader_trait_scientist_synthetic
                       				has_trait = leader_trait_ruler_synthetic
                   		 	}
                		}
               			if = {
                    			limit = { leader_class = admiral }
                    			add_trait = leader_trait_admiral_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
                		}
                		if = {
                    			limit = { leader_class = general }
                    			add_trait = leader_trait_general_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
                		}
                		if = {
                    			limit = { leader_class = governor }
                    			add_trait = leader_trait_governor_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
                		}
                		if = {
                    			limit = { leader_class = scientist }
                    			add_trait = leader_trait_scientist_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
                		}
                		if = {
                    			limit = { leader_class = ruler }
                    			add_trait = leader_trait_ruler_synthetic
                    			add_ruler_trait = leader_trait_ruler_synthetic
				}
			}

			give_technology = { tech = tech_bio_reactor message = no }

		}
	}

	}
}

country_event = {
	id = synthstart.2
	title = "synthstart.2.name"
	desc = "synthstart.2.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_laboratory_sound
	trackable = yes

	is_triggered_only = yes

	option = {
		name = "synthstart.2.a"
		hidden_effect = { save_event_target_as = synth_upgrade_owner }
		capital_scope = {
			enable_special_project = {
				name = "SYNTHETIC_REBIRTH_PROJECT"
				location = this
				owner = root
			}
		}
	}
}

country_event = {
	id = synthstart.4
	title = "synthstart.4.name"
	desc = "synthstart.4.desc"
	picture = GFX_evt_machine_sapience
	show_sound = event_synthetic_evolution
	trackable = no

	is_triggered_only = yes

	option = {
		name = "synthstart.4.a"
		remove_modifier = imperfect_synth
	}
}